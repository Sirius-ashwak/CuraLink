rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - authenticated users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId;
    }
    
    // Doctors collection - publicly readable for patient selection
    match /doctors/{doctorId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == doctorId;
      allow update, delete: if request.auth != null && request.auth.uid == doctorId;
    }
    
    // Patients collection - only readable by the patient themselves
    match /patients/{patientId} {
      allow read, write: if request.auth != null && request.auth.uid == patientId;
      allow create: if request.auth != null && request.auth.uid == patientId;
    }
    
    // Appointments - accessible by patient and doctor involved
    match /appointments/{appointmentId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.patientId || 
         request.auth.uid == resource.data.doctorId);
      allow create: if request.auth != null;
    }
    
    // Emergency transport - accessible by patient and emergency staff
    match /emergencyTransport/{transportId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.patientId ||
         hasCustomClaim('role', 'emergency_staff') ||
         hasCustomClaim('role', 'doctor'));
      
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        hasCustomClaim('role', 'emergency_staff');
    }
    
    // Medical records - only accessible by patient and their assigned doctors
    match /medicalRecords/{recordId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.patientId ||
         request.auth.uid == resource.data.doctorId);
      allow create: if request.auth != null;
    }
    
    // Helper function to check custom claims
    function hasCustomClaim(claim, value) {
      return request.auth.token[claim] == value;
    }
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
  }
}